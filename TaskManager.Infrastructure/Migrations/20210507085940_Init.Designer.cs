// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Infrastructure;

namespace TaskManager.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210507085940_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.Domain.InDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTaskId")
                        .IsUnique();

                    b.ToTable("InDocuments");
                });

            modelBuilder.Entity("TaskManager.Domain.OutDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualRespDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlannsedRespDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SendRespCommand")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendRespCommandDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDocsDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTaskId");

                    b.ToTable("OutDocuments");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionSubTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CancelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutorReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductionTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReportFlag")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("TaskReadyFlag")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UpperTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTaskId");

                    b.HasIndex("UpperTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DocReadyFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlannedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("TaskCancelFlag")
                        .HasColumnType("bit");

                    b.Property<string>("TaskContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TaskReadyFlag")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("ProductionTasks");
                });

            modelBuilder.Entity("TaskManager.Domain.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("TaskManager.Domain.InDocument", b =>
                {
                    b.HasOne("TaskManager.Domain.ProductionTask", "ProductionTask")
                        .WithOne("InputDocs")
                        .HasForeignKey("TaskManager.Domain.InDocument", "ProductionTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TaskManager.Domain.Document", "Documents", b1 =>
                        {
                            b1.Property<Guid>("InDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DocumentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InDocumentId", "DocumentId");

                            b1.ToTable("InDocuments_Documents");

                            b1.WithOwner()
                                .HasForeignKey("InDocumentId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "RegistrPerson", b1 =>
                        {
                            b1.Property<Guid>("InDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("InDocumentId");

                            b1.ToTable("InDocuments");

                            b1.WithOwner()
                                .HasForeignKey("InDocumentId");
                        });

                    b.Navigation("Documents");

                    b.Navigation("ProductionTask");

                    b.Navigation("RegistrPerson");
                });

            modelBuilder.Entity("TaskManager.Domain.OutDocument", b =>
                {
                    b.HasOne("TaskManager.Domain.ProductionTask", "ProductionTask")
                        .WithMany("ReportDocs")
                        .HasForeignKey("ProductionTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TaskManager.Domain.Document", "Documents", b1 =>
                        {
                            b1.Property<Guid>("OutDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DocumentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutDocumentId", "DocumentId");

                            b1.ToTable("OutDocuments_Documents");

                            b1.WithOwner()
                                .HasForeignKey("OutDocumentId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "Executor", b1 =>
                        {
                            b1.Property<Guid>("OutDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OutDocumentId");

                            b1.ToTable("OutDocuments");

                            b1.WithOwner()
                                .HasForeignKey("OutDocumentId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "RespCommandPerson", b1 =>
                        {
                            b1.Property<Guid>("OutDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OutDocumentId");

                            b1.ToTable("OutDocuments");

                            b1.WithOwner()
                                .HasForeignKey("OutDocumentId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "ResponsePerson", b1 =>
                        {
                            b1.Property<Guid>("OutDocumentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("OutDocumentId");

                            b1.ToTable("OutDocuments");

                            b1.WithOwner()
                                .HasForeignKey("OutDocumentId");
                        });

                    b.Navigation("Documents");

                    b.Navigation("Executor");

                    b.Navigation("ProductionTask");

                    b.Navigation("RespCommandPerson");

                    b.Navigation("ResponsePerson");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionSubTask", b =>
                {
                    b.HasOne("TaskManager.Domain.ProductionTask", "ProductionTask")
                        .WithMany("Tasks")
                        .HasForeignKey("ProductionTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Domain.ProductionSubTask", "UpperTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("UpperTaskId");

                    b.OwnsMany("TaskManager.Domain.Document", "ReportDocs", b1 =>
                        {
                            b1.Property<Guid>("ProductionSubTaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DocumentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductionSubTaskId", "DocumentId");

                            b1.ToTable("Tasks_ReportDocs");

                            b1.WithOwner()
                                .HasForeignKey("ProductionSubTaskId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "Executor", b1 =>
                        {
                            b1.Property<Guid>("ProductionSubTaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProductionSubTaskId");

                            b1.ToTable("Tasks");

                            b1.WithOwner()
                                .HasForeignKey("ProductionSubTaskId");
                        });

                    b.Navigation("Executor");

                    b.Navigation("ProductionTask");

                    b.Navigation("ReportDocs");

                    b.Navigation("UpperTask");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionTask", b =>
                {
                    b.HasOne("TaskManager.Domain.TaskType", "TaskType")
                        .WithMany("ProductionTasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("TaskManager.Domain.Document", "CancellationBasics", b1 =>
                        {
                            b1.Property<Guid>("ProductionTaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DocumentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductionTaskId", "DocumentId");

                            b1.ToTable("ProductionTasks_CancellationBasics");

                            b1.WithOwner()
                                .HasForeignKey("ProductionTaskId");
                        });

                    b.OwnsMany("TaskManager.Domain.Document", "CompletionBasics", b1 =>
                        {
                            b1.Property<Guid>("ProductionTaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("DocumentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Title")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductionTaskId", "DocumentId");

                            b1.ToTable("ProductionTasks_CompletionBasics");

                            b1.WithOwner()
                                .HasForeignKey("ProductionTaskId");
                        });

                    b.OwnsOne("TaskManager.Domain.Person", "ResponsibleExecutor", b1 =>
                        {
                            b1.Property<Guid>("ProductionTaskId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProductionTaskId");

                            b1.ToTable("ProductionTasks");

                            b1.WithOwner()
                                .HasForeignKey("ProductionTaskId");
                        });

                    b.Navigation("CancellationBasics");

                    b.Navigation("CompletionBasics");

                    b.Navigation("ResponsibleExecutor");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionSubTask", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("TaskManager.Domain.ProductionTask", b =>
                {
                    b.Navigation("InputDocs");

                    b.Navigation("ReportDocs");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManager.Domain.TaskType", b =>
                {
                    b.Navigation("ProductionTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
